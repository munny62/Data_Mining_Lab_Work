{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e557b579-43d6-465b-8580-5207ec3672cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "class MatrixOperations:\n",
    "    def __init__(self):\n",
    "        # Initialize the matrix attribute\n",
    "        self.matrix = None\n",
    "\n",
    "    def get_matrix(self, size, filename):\n",
    "        try:\n",
    "            # Open the file and read its content\n",
    "            with open(filename, 'r') as f:\n",
    "                # Use map to convert the file content into a list of integers\n",
    "                numbers = list(map(int, f.read().split()))\n",
    "            \n",
    "            # Use assert to check if there are enough numbers for the matrix\n",
    "            assert len(numbers) >= size * size, \"Not enough numbers in the file\"\n",
    "\n",
    "            # Reshape the list of numbers into a matrix of size*size\n",
    "            self.matrix = np.array(numbers[:size * size]).reshape(size, size)\n",
    "            return self.matrix\n",
    "        except FileNotFoundError:\n",
    "            # Handle the case where the file is not found\n",
    "            print(f\"Error: File '{filename}' not found\")\n",
    "            exit(1)\n",
    "        except (ValueError, AssertionError) as e:\n",
    "            # Handle value errors and assertion errors\n",
    "            print(f\"Error: {e}\")\n",
    "            exit(1)\n",
    "\n",
    "    def product(self, m1, m2):\n",
    "        # Return the product of two matrices using numpy's dot function\n",
    "        return np.dot(m1, m2)\n",
    "\n",
    "    def dot_product(self, m1, m2):\n",
    "        # Return the element-wise product of two matrices\n",
    "        return np.multiply(m1, m2)\n",
    "\n",
    "    def division(self, m1, m2):\n",
    "        # Handle division by zero using numpy masked arrays\n",
    "        with np.errstate(divide='ignore', invalid='ignore'):\n",
    "            m2_masked = np.ma.masked_equal(m2, 0)  # Mask zero entries in m2\n",
    "            result = np.ma.divide(m1, m2_masked)  # Perform division with masked array\n",
    "        \n",
    "        # Convert the masked result to \"undef\" where there are masked values\n",
    "        result_str = np.where(np.ma.getmask(result), \"undef\", result)\n",
    "        return result_str\n",
    "\n",
    "    def print_matrix(self, matrix, name):\n",
    "        # Print matrix with each row on a new line\n",
    "        print(f\"The content of the {name} matrix is:\")\n",
    "        print(\"\\n\".join(\"\\t\".join(map(str, row)) for row in matrix))\n",
    "        print(\"=\"*50)\n",
    "\n",
    "    def print_result(self, result, name):\n",
    "        # Print the result matrix formatted with two significant digits for numbers\n",
    "        print(f\"The result of {name} is:\")\n",
    "        print(\"\\n\".join(\"\\t\".join(f\"{item:0.2f}\" if isinstance(item, (int, float)) else str(item) for item in row) for row in result))\n",
    "        print(\"=\"*50)\n",
    "\n",
    "def main():\n",
    "    matrix_operations = MatrixOperations()\n",
    "    \n",
    "    # Step 1: Get matrix size from user\n",
    "    try:\n",
    "        # Input and validate the matrix size (between 4 and 8)\n",
    "        size = int(input(\"Enter the dimension of your matrix: \"))\n",
    "        assert 4 <= size <= 8, \"***** This dimension is out of bound. The program stops in here.\"\n",
    "    except (ValueError, AssertionError) as e:\n",
    "        print(f\"Error: {e}\")\n",
    "        print(\"(*********************** End of the Program ************************)\")\n",
    "        exit(1)\n",
    "\n",
    "    # Step 2: Create matrices from files\n",
    "    m1 = matrix_operations.get_matrix(size, \"file1.txt\")\n",
    "    m2 = matrix_operations.get_matrix(size, \"file2.txt\")\n",
    "    \n",
    "    # Step 3: Print matrices\n",
    "    matrix_operations.print_matrix(m1, \"first\")\n",
    "    matrix_operations.print_matrix(m2, \"second\")\n",
    "    \n",
    "    # Step 4: Perform matrix multiplication (dot product)\n",
    "    m1_multiply_m2 = matrix_operations.product(m1, m2)\n",
    "    matrix_operations.print_result(m1_multiply_m2, \"product of the two matrices\")\n",
    "    \n",
    "    # Step 5: Perform element-wise dot multiplication\n",
    "    m1_dot_m2 = matrix_operations.dot_product(m1, m2)\n",
    "    matrix_operations.print_result(m1_dot_m2, \"dot-product of the two matrices\")\n",
    "    \n",
    "    # Step 6: Perform element-wise division\n",
    "    m1_divide_m2 = matrix_operations.division(m1, m2)\n",
    "    matrix_operations.print_result(m1_divide_m2, \"result of matrix1 divided by matrix2\")\n",
    "    \n",
    "    # Step 7: Modify matrix m2 for demonstration (set one element to zero)\n",
    "    m2[0, 0] = 0  # Set to zero to trigger \"undef\" in division\n",
    "    \n",
    "    # Print modified matrices\n",
    "    matrix_operations.print_matrix(m1, \"first\")\n",
    "    matrix_operations.print_matrix(m2, \"modified second\")\n",
    "    \n",
    "    # Repeat matrix operations with the modified matrix\n",
    "    m1_multiply_m2 = matrix_operations.product(m1, m2)\n",
    "    matrix_operations.print_result(m1_multiply_m2, \"product of the two matrices\")\n",
    "    \n",
    "    m1_dot_m2 = matrix_operations.dot_product(m1, m2)\n",
    "    matrix_operations.print_result(m1_dot_m2, \"dot-product of the two matrices\")\n",
    "    \n",
    "    m1_divide_m2 = matrix_operations.division(m1, m2)\n",
    "    matrix_operations.print_result(m1_divide_m2, \"result of matrix1 divided by matrix2\")\n",
    "\n",
    "    print(\"(*********************** End of the Program ************************)\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "600f1ab9-0db6-4a8d-a98e-785c0fc3983e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
