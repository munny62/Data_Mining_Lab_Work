{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71b6858f-09e9-48e4-a0e7-c3f086c42331",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a number between 4 and 7 (inclusive):  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5x5 matrix:\n",
      "1 2 3 4 5\n",
      "6 7 8 9 10\n",
      "11 12 13 14 15\n",
      "16 17 18 19 20\n",
      "21 22 23 24 25\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "class MatrixCreator:\n",
    "    def __init__(self):\n",
    "        # Initialize the matrix and the value of n\n",
    "        self.n = None\n",
    "        self.matrix = None\n",
    "\n",
    "    def get_input(self):\n",
    "        # Interactively get a positive number n\n",
    "        try:\n",
    "            # Get input and convert to integer\n",
    "            self.n = int(input(\"Enter a number between 4 and 7 (inclusive): \"))\n",
    "            # Use assert instead of if block to check range and raise an error\n",
    "            assert 4 <= self.n <= 7, \"Number out of range\"\n",
    "        except (ValueError, AssertionError) as e:\n",
    "            # Catch invalid input or range errors and exit the program\n",
    "            print(f\"Error: {e}\")\n",
    "            exit(1)\n",
    "\n",
    "    def read_file(self, filename):\n",
    "        try:\n",
    "            # Open the file and read the content\n",
    "            with open(filename, 'r') as f:\n",
    "                # Use map to convert the file content to a list of integers\n",
    "                numbers = list(map(int, f.read().split()))\n",
    "            \n",
    "            # Use assert to check if there are enough numbers\n",
    "            assert len(numbers) >= self.n * self.n, \"Not enough numbers in the file\"\n",
    "\n",
    "            # Slice the first n*n numbers and reshape them into a matrix\n",
    "            self.matrix = np.array(numbers[:self.n * self.n]).reshape(self.n, self.n)\n",
    "        except FileNotFoundError:\n",
    "            # Handle the case where the file is not found\n",
    "            print(f\"Error: File '{filename}' not found\")\n",
    "            exit(1)\n",
    "        except (ValueError, AssertionError) as e:\n",
    "            # Handle value errors and assertion errors\n",
    "            print(f\"Error: {e}\")\n",
    "            exit(1)\n",
    "\n",
    "    def display_matrix(self):\n",
    "        # Check if the matrix exists\n",
    "        if self.matrix is not None:\n",
    "            # Print matrix dimensions\n",
    "            print(f\"{self.n}x{self.n} matrix:\")\n",
    "            # Use list comprehension and join to print matrix without brackets\n",
    "            print(\"\\n\".join(\" \".join(map(str, row)) for row in self.matrix))\n",
    "        else:\n",
    "            # If the matrix is not created, print an error message\n",
    "            print(\"Matrix not created.\")\n",
    "\n",
    "# Main part of the program\n",
    "if __name__ == \"__main__\":\n",
    "    # Create an instance of MatrixCreator\n",
    "    matrix_creator = MatrixCreator()\n",
    "    # Get the user input\n",
    "    matrix_creator.get_input()\n",
    "    # Read the file and create the matrix\n",
    "    matrix_creator.read_file(\"file1.txt\")\n",
    "    # Display the matrix\n",
    "    matrix_creator.display_matrix()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1851e865-4d9e-4f69-a671-6cc1424bec71",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
